Concepts to introduce:

Space complexity: how much memory, in the worst case, is needed at any point in the algorithm. 
In-place sorting: No need to create an extra helper array to temporarily store the elements. 
Probabalistic guarantee of performance: The time complexity of the algorithm is guaranteed only after a random shuffling preprocessing step;
Priority queue data type: An abstract data type(ADT) that stores items not necessarily in full sorted order. But it is interested in two functions: delete the maximum/minimum item, and insert. 
Binary Heap data structure: a complete binary tree that has relates very closely with an array. Max heap and min heap. The index of the array used to represents a heap starts with the index 1 instead of zero. The left child and right child of a node(index n) has index (2n) and (2n+1) respectively. The height of an heap with node (N) is H=floor(log(N)).

		  12
     /        \
    5         10	
   /  \      /   \
  2    3     5    7
 / \  / \   / \  / \
0  1  1  2  2 2  3  5

		 12
     /        \
    5         10	
   /  \      /   \
  2    3     5    7
 / \  / \   / \  / \
0  1  1  2  2 2  3  5


N=15;
To create a heap from an array A[n] takes: 4*1+2*2+1*3=4+4+3=11 = N-1-logN times, proof: graphically color all the links.
Repeatedly perform maxDel takes: 8*3+4*2+2*1 = 34. 
T(n)      =             {2^H*H         + 2^(H-1)*(H-1) +...+ 2^2*(2)} + 2^1*(1)  
2T(n)     = 2^(H+1)*H + {2^(H)*(H-1)   + 2^(H-1)*(H-2) +...+ 2^2*(1)}
(1-2)T(n) = {2^H +2^(H-1)+...+2^2} +2^1*(1) - 2^(H+1)*H = (4-2^H*2)/(1-2) +2 - 2^(H+1)*H = 2^H*2-2 - 2^(H+1)*H = 2^(H+1)*(1-H) -2
T(n) = 2^(H+1)*(H-1) -2 = O(N*H)=O(NlogN)

Sorting algorithms:

Sorting algorithm; Average time complexity; Time Complexity worst case; Average Space complexity; Worst case space complexity
Selection sort(A child's algorithm);O(n^2);	O(n^2);	O(1); O(1);
Insertion sort(in place algorithm);	O(n^2); O(n^2); O(1); O(1);
Merge sort(devide and conquor); O(nlog(n)); O(nlog(n)); O(n)(helper array needed);O(n)(helper array needed);
quick sort(probabalistic guarantee of performance); O(nlog(n)); O(n^2); O(log(n))(need to remember the devider index of the array into two subarrays); O(n); 
heap sort(an application of the priority queue ADT);  O(nlog(n)) (form a heap takes N-logN time, repeately maxDel takes O(NlogN) times); O(1)(in-place); O(1);
Counting sort,
Radix sort,
Bucket Sort, 

Exercises:
Show in the style of the example trace with selection sort, how selection sort sorts the array
E A S Y Q U E S T I O N

Show in the style of the example trace with insertion sort, how insertion sort sorts the array
E A S Y Q U E S T I O N

Which method runs fastest for an array with all keys identical, selection sort or insertion sort?

Suppose that we use insertion sort on a randomly ordered array where items have only one of three key values. Is the running time linear, quadratic, or something in between?

Expensive exchange. A clerk at a shipping company is charged with the task of rearranging a number of large crates in order of the time they are to be shipped out. Thus, the cost of compares is very low (just look at the labels) relative to the cost of exchanges (move the crates). The warehouse is nearly full: there is extra space sufficient to hold any one of the crates, but not two. Which sorting method should the clerk use?

Give traces, in the style of the trace given in this section, showing how the keys E A S Y Q U E S T I O N are sorted with top-down mergesort and with bottom-up mergesort.

Suppose that top-down mergesort is modified to skip the call on merge() whenever a[mid] <= a[mid+1]. Prove that the number of compares used for an array in sorted order is linear.

About how many compares will Quick.sort() make when sorting an array of N items that are all equal?

Nuts and bolts. (G. J. E. Rawlins). You have a mixed pile of N nuts and N bolts and need to quickly find the corresponding pairs of nuts and bolts. Each nut matches exactly one bolt, and each bolt matches exactly one nut. By fitting a nut and bolt together, you can see which is bigger. But it is not possible to directly compare two nuts or two bolts. Given an efficient method for solving the problem.

Criticize the following idea: to implement find the maximum in constant time in priority queue, why not keep track of the maximum value inserted so far, then return that value for find the maximum?

Is an array that is sorted in decreasing order a max-oriented heap.

Prove that sink-based heap construction uses at most 2n compares and at most n exchanges.
